apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-blue-green-deploy
  namespace: test
  labels:
    Tier: app
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      Tier: app
  template:
    metadata:
      labels:
        Tier: app
    spec:
      nodeSelector:
        tier: ng
        role: game
      tolerations:
      - key: ng
        operator: Equal
        value: game
        effect: NoSchedule
      containers:
      - name: test
        image: "{{ .Values.image.repository }}:{{ .Values.image.test_tag }}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: {{ .Values.containerPort }}
          protocol: TCP
        readinessProbe:
          httpGet:
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: test-blue-green-deploy
  namespace: test
spec:
  replicas: 2
  selector:
    matchLabels:
      Tier: app
  workloadRef: 
    apiVersion: apps/v1
    kind: Deployment
    name: test-blue-green-deploy
  strategy:

    # Blue-green update strategy
    blueGreen:

      # Reference to service that the rollout modifies as the active service.
      # Required.
      activeService: blue-service

      # Name of the service that the rollout modifies as the preview service.
      # +optional
      previewService: green-service

      # The number of replicas to run under the preview service before the
      # switchover. Once the rollout is resumed the new ReplicaSet will be fully
      # scaled up before the switch occurs +optional
      previewReplicaCount: 1

      # Indicates if the rollout should automatically promote the new ReplicaSet
      # to the active service or enter a paused state. If not specified, the
      # default value is true. +optional
      autoPromotionEnabled: false

      # Adds a delay before scaling down the previous ReplicaSet. If omitted,
      # the Rollout waits 30 seconds before scaling down the previous ReplicaSet.
      # A minimum of 30 seconds is recommended to ensure IP table propagation
      # across the nodes in a cluster.
      scaleDownDelaySeconds: 30