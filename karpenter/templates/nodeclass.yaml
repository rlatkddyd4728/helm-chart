apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: game-nodeclass
spec:
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "sy-kim-eks-cluster"
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "sy-kim-eks-cluster"
  amiFamily: AL2
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        deleteOnTermination: true
        throughput: 125
  role: "sy_kim-KarpenterNodeRole"
  userData:  |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

    --==MYBOUNDARY==
    Content-Type: text/x-shellscript; charset="us-ascii"

    #!/bin/bash
    echo "Running custom user data script"

    prefix=sy_kim-karpenter
    se_id=sy_kim
    region=ap-southeast-3
    cluster=sy-kim-eks-cluster

    #=============================
    # hostname
    #=============================
    res_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
    tag_name=${prefix}-$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
    # hostnamectl set-hostname ${tag_name}

    #=============================
    # tag
    #=============================
    aws ec2 create-tags --resources ${res_id} --tags Key=Name,Value=${tag_name} --region ${region}

    #=============================
    # useradd
    #=============================
    users=("sy_kim" "rundeck")
    for user in "${users[@]}"; do
        if [ "$user" == "" ]; then
            continue
        fi
        useradd ${user}
        mkdir -m 700 /home/${user}/.ssh
        aws s3 cp s3://s3-sykim-ops/auth/${user}/id_rsa.pub /home/${user}/creditals/id_rsa.pub --region ${region}
        mv /home/${user}/creditals/id_rsa.pub /home/${user}/.ssh/authorized_keys
        rm -rf /home/${user}/creditals
        chmod 600 /home/$user/.ssh/authorized_keys
        chown -R ${user}:${user} /home/${user}/.ssh
        echo "${user}    ALL=(ALL)   NOPASSWD: ALL" > /etc/sudoers.d/${user}
    done

    #=============================
    # Add the kubelet garbage collection
    #=============================
    # Inject imageGCHighThresholdPercent value unless it has already been set.
    if ! grep -q imageGCHighThresholdPercent /etc/kubernetes/kubelet/kubelet-config.json; 
    then 
        sed -i '/"apiVersion*/a \ \ "imageGCHighThresholdPercent": 70,' /etc/kubernetes/kubelet/kubelet-config.json
    fi

    # Inject imageGCLowThresholdPercent value unless it has already been set.
    if ! grep -q imageGCLowThresholdPercent /etc/kubernetes/kubelet/kubelet-config.json; 
    then 
        sed -i '/"imageGCHigh*/a \ \ "imageGCLowThresholdPercent": 50,' /etc/kubernetes/kubelet/kubelet-config.json
    fi
    --==MYBOUNDARY==-- 
status:
  instanceProfile: "sy_kim-KarpenterNodeInstanceProfile"
